#!/bin/bash

# hard-coded defaults
CAF_HOME=@CMAKE_HOME_DIRECTORY@
BIN_PATH=$CAF_HOME/build/bin

DEFAULT_MODE=true

# language/framework settings
RUN_CAF=false
RUN_CHARM=false
RUN_SCALA=false
RUN_ERLANG=false
RUN_OTHER=false

# benchmark settings
RUN_MIXED_CASE=false
RUN_ACTOR_CREATION=false
RUN_MAILBOX_PERFORMANCE=false
RUN_CUSTOM_BENCH=false

CUSTOM_BENCH_NAME=""
CUSTOM_BENCH_ARGS=""
BENCH_REPETITIONS=10
LABEL_SUFFIX=""
OTHER_LABEL_NAME=""
# CPU core settings
MIN_CORES=$(lscpu | grep -E "^Socket\(s\)" | grep -oE "[0-9]+")
MAX_CORES=$(lscpu | grep -E "^CPU\(s\)" | grep -oE "[0-9]+")



usage="\
Usage: $0 default BENCH_USER OUT_DIR [OPTION]...
       $0 custom  BENCH_USER OUT_DIR X_LABEL X_VALUE LABEL BIN_PATH BENCH BENCH_ARGS
  
  BENCH_USER: Name or ID of the user this benchmark should run as  
  OUT_DIR:    Output directory for measurment files

  X_LABEL:    Label of x-axis (musst match regex ^[a-zA-Z_]+$)
  X_VALUE:    Value of the control variable
  LABEL:      Benchmark topic (similar to --label, musst match regex ^[a-zA-Z0-9]+$, no underscore allowed!) 
  BIN_PATH:   Folder of benchmark executables
  BENCH:      Name of the benchmark executable (musst match regex ^[a-zA-Z0-9_]+$)
  BENCH_ARGS: Remainder of the arguments are passed to BENCH

  Options:
    --bin-path=PATH        set folder of benchmark executables 
                           (default ${BIN_PATH})
    --label=all|<list>     all    includes \"caf,charm,scala,erlang\"
                           <list> defines a subset of <all>
    --bench=all      |     
            <list>   |     
            <custom>       all      includes \"mixed-case,actor-creation,
                                    mailbox-performance\"
                           <list>   can be a subset of of <all>
                           <custom> run your custom benchmark
                           
                           <list> defines a subset of <all>
    --min-cores=NUM        start at NUM cores (default: ${MIN_CORES})
    --max-cores=NUM        stop at NUM cores (default: ${MAX_CORES})
    --repetitions=NUM      number of repetitions per bench
                           (default: ${BENCH_REPETITIONS})
    --custom-args=ARGS     set arguments for your custom bench
    --label-suffix=SUFFIX  add a suffix to the label to distinguish
                           between measurments with the same label
"

# parse arguments
if [[ $# -lt 3 ]]; then
  echo "${usage}" 1>&2
  exit 0
fi

if [ "$1" == "default" ]; then
  DEFAULT_MODE=true 
elif [ "$1" == "custom" ]; then
  DEFAULT_MODE=false
else
  echo "${usage}" 1>&2
  exit 1
fi
shift

BENCH_USER="$1" ; shift
OUT_DIR="$1" ; shift
LABEL_STR=""
BENCH_STR=""

if [ "$DEFAULT_MODE" = true ]; then
  while [ $# -ne 0 ]; do
    case "$1" in
      -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
      *) optarg= ;;
    esac
    case "$1" in
      --help|-h)
        echo "${usage}" 1>&2
        exit 1
        ;;
      --bin-path=*)
        BIN_PATH="$optarg"
        ;;
      --label=*)
        IFS=',' read -ra LABEL <<< "$optarg"
        for i in "${LABEL[@]}"; do
          case "$i" in
            "all") RUN_CAF=true; RUN_CHARM=true; RUN_SCALA=true; RUN_ERLANG=true ;; 
            "caf") RUN_CAF=true ;;
            "charm") RUN_CHARM=true ;;
            "scala") RUN_SCALA=true ;;
            "erlang") RUN_ERLANG=true ;;
            *) if ! [[ $i =~ ^[a-zA-Z0-9-]+$ ]]; then
                 echo "label <${optarg}> does not match regex ^[a-zA-Z0-9-]+$" 1>&2
                 exit 1
               else
                 RUN_OTHER=true
                 OTHER_LABEL_NAME=$i
               fi
          esac
        done
        ;;
      --bench=*)
        IFS=',' read -ra BENCH <<< "$optarg"
        for i in "${BENCH[@]}"; do
          case "$i" in
            "all") RUN_MIXED_CASE=true; RUN_ACTOR_CREATION=true; RUN_MAILBOX_PERFORMANCE=true ;; 
            "mixed-case") RUN_MIXED_CASE=true ;;
            "actor-creation") RUN_ACTOR_CREATION=true ;;
            "mailbox-performance") RUN_MAILBOX_PERFORMANCE=true ;;
            *) if [ "${#BENCH[@]}" -gt "1" ]; then
                 echo "unknown bench argument \"$i\""
                 exit 0
               else
                 echo "unknown bench \"$i\", run as custom bench"; 
                 if ! [[ $i =~ ^[a-zA-Z0-9_-]+$ ]]; then
                   echo "custom bench <${i}> does not match regex ^[a-zA-Z0-9_-]+$" 1>&2
                   exit 1
                 fi
                 CUSTOM_BENCH_NAME=$i
                 RUN_CUSTOM_BENCH=true
               fi
            ;;
          esac
        done
        ;;
      --min-cores=*) MIN_CORES=$optarg ;;
      --max-cores=*) MAX_CORES=$optarg ;;
      --repetitions=*) BENCH_REPETITIONS=$optarg ;;
      --custom-args=*) 
        if [ "$RUN_CUSTOM_BENCH" = true ]; then
          CUSTOM_BENCH_ARGS=$optarg
        else
          # usability bug
          echo "To set custom arguments the bench musst be a custom bench" 1>&2
          exit 1 
        fi
        ;;
      --label-suffix=*) 
          if ! [[ $optarg =~ ^[a-zA-Z0-9-]+$ ]]; then
            echo "label suffix <${optarg}> does not match regex ^[a-zA-Z0-9-]+$" 1>&2
            exit 1
          else
            LABEL_SUFFIX="-$optarg" 
          fi
        ;;
    esac
    shift
  done

  if $RUN_ERLANG ; then LABEL_STR="erlang $LABEL_STR" ; fi
  if $RUN_SCALA ; then LABEL_STR="scala $LABEL_STR" ; fi
  if $RUN_CHARM ; then LABEL_STR="charm $LABEL_STR" ; fi
  if $RUN_CAF ; then LABEL_STR="caf $LABEL_STR" ; fi
  if $RUN_OTHER ; then LABEL_STR="$OTHER_LABEL_NAME $LABEL_STR" ; fi

  if $RUN_MIXED_CASE ; then BENCH_STR="mixed_case" $BENCH_STR ; fi
  if $RUN_ACTOR_CREATION ; then BENCH_STR="actor_creation $BENCH_STR" ; fi
  if $RUN_MAILBOX_PERFORMANCE ; then BENCH_STR="mailbox_performance $BENCH_STR" ; fi
  if $RUN_CUSTOM_BENCH ; then BENCH_STR="$CUSTOM_BENCH_NAME $BENCH_STR" ; fi
else
  X_LABEL=$1 ; shift
  if ! [[ $X_LABEL =~ ^[a-zA-Z_-]+$ ]]; then
    echo "X_LABEL <${X_LABEL}> does not match regex ^[a-zA-Z_-]+$" 1>&2
    exit 1
  fi
  X_VALUE=$1 ; shift
  LABEL_STR=$1 ; shift
  if ! [[ $LABEL_STR =~ ^[a-zA-Z0-9-]+$ ]]; then
    echo "LABEL <${LABEL_STR}> does not match regex ^[a-zA-Z0-9-]+$" 1>&2
    exit 1
  fi
  BIN_PATH=$1 ; shift
  BENCH_STR=$1 ; shift
  if ! [[ $BENCH_STR =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "BENCH <${BENCH_STR}> does not match regex ^[a-zA-Z0-9_-]+$" 1>&2
    exit 1
  fi
  OWN_TEST_ARGS=$@ 
fi

# check authorization
if [[ $(id -u) != 0 ]]; then
  echo "you need to be root"
  exit 0
fi

# arguments for all benchmarks
mixed_case="100 100 1000 4"
actor_creation="20"
mailbox_performance="100 1000000"
mandelbrot="16000"

run_bench() {
  label=$1 ; shift
  x_value_n_label=$1 ; shift
  for bench in $BENCH_STR ; do
    echo " Bench: $bench"
    if [ "$DEFAULT_MODE" = true ]; then
      if [ "$bench" == "$CUSTOM_BENCH_NAME" ]; then
        args=$CUSTOM_BENCH_ARGS
      else 
        args=${!bench}
      fi
    else
      args=$OWN_TEST_ARGS
    fi
    runtimes="$OUT_DIR/${x_value_n_label}_runtime_${label}-ms${LABEL_SUFFIX}_${bench}.txt"
    for i in $(seq 1 $BENCH_REPETITIONS) ; do
      memfile="$OUT_DIR/${x_value_n_label}_memory_${i}_${label}-kB${LABEL_SUFFIX}_${bench}.txt"
      if [ -f "$memfile" ] ; then
        echo "SKIP $label $bench $i (mem file already exists)"
      else
        printf "$i "
        $CAF_HOME/benchmarks/scripts/run $BENCH_USER $BIN_PATH $runtimes $memfile $label $bench $args >> /dev/null
      fi
    done
    #delete current line and move cursor to the beginning
    printf "\033[2K\r" 
  done
}

for label in $LABEL_STR; do
  echo "-- Label: ${label}${LABEL_SUFFIX}"
  if [ "$DEFAULT_MODE" = true ]; then
    for NumCores in $(seq $MIN_CORES $MIN_CORES $MAX_CORES); do
      $CAF_HOME/benchmarks/scripts/activate_cores $NumCores >> /dev/null
      echo "Cores: $NumCores"
      x_value=$(printf "%.2i" $NumCores)
      x_label="cores"
      run_bench "$label" "${x_value}_${x_label}"
    done
  else
    run_bench "$label" "${X_VALUE}_${X_LABEL}"
  fi
done
